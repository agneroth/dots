GIT_FOLDER=$HOME/git

if [[ -n $SSH_CONNECTION ]]; then
  export EDITOR='vim'
else
  export EDITOR='nvim'
fi

# For enabling k8s krew 
export PATH="${KREW_ROOT:-$HOME/.krew}/bin:$PATH"

# Change kubectl editor
export KUBE_EDITOR=$EDITOR

# Change systemd edit editor
# TODO: Need to change visudo also... (Defaults  env_keep += "SYSTEMD_EDITOR")
export SYSTEMD_EDITOR=$EDITOR

# Change default editor 
export VISUAL=$EDITOR

# Change git editor
export GIT_EDITOR=$EDITOR

export STARSHIP_CONFIG=/home/agneroth/git/dots/.config/starship.toml

# ============ Auxiliary Function ============

command_exists() {
  command -v "$@" >/dev/null 2>&1
}

# ============ ZSH Extensions ============


ZSH="$HOME/.oh-my-zsh"

# If omz exists, load and configure it!
if [ -f $ZSH/oh-my-zsh.sh ]; then
    export ZSH

    # This theme does not conflict with staship
    ZSH_THEME="random"
    ZSH_CUSTOM=${ZSH_CUSTOM:-$HOME/.oh-my-zsh/custom}

    # Ref: https://github.com/ohmyzsh/ohmyzsh/wiki/Plugins
    plugins=(
        git
        ssh
        colorize
        z
        alias-finder
        # TODO: checkout helm
    )
    
    # Alias-finder configuration
    zstyle ':omz:plugins:alias-finder' autoload yes # disabled by default

    command_exists gh && plugins+=(gh)
    command_exists kubectl && plugins+=(kubectl)
    command_exists starship && plugins+=(starship)
    command_exists fzf && plugins+=(fzf zsh-interactive-cd)
    command_exists terraform && plugins+=(terraform)

    # Requires cloning the repo into $ZSH_CUSTOM/plugins
    [ -d ${ZSH_CUSTOM}/plugins/zsh-autosuggestions ] && {
        plugins+=(zsh-autosuggestions)
        # Change highlight style
        ZSH_AUTOSUGGEST_HIGHLIGHT_STYLE='fg=#999'
    }

    # Requires cloning the repo into $ZSH_CUSTOM/plugins
    [ -d ${ZSH_CUSTOM}/plugins/zsh-syntax-highlighting ] && {
        plugins+=(zsh-syntax-highlighting)
    }
    
    source $ZSH/oh-my-zsh.sh
fi

# ============ Enable GOTO =============

if [ -f $GIT_FOLDER/goto/goto.sh ]; then
    source $GIT_FOLDER/goto/goto.sh
fi

# ============ Enable kubectl autocompletion =============


# Enable if not loaded by omz
if command_exists kubectl && ! command_exists omz ; then
    source <(kubectl completion zsh)
fi

# ============ Enable helm autocompletion =============

if command_exists helm; then
    source <(helm completion zsh)
fi

# ============ Enable starship =============

# Enable if not loaded by omz
if command_exists starship && ! command_exists omz ; then
    eval "$(starship init zsh)"
fi 

# ============ Enable FuzzyFinder ============

# Enable if not loaded by omz
if command_exists fzf && ! command_exists omz ; then
    source <(fzf --zsh)
fi 

# ============ Enable UV (Python) autocompletion ============

if command_exists uv ; then
    source <(uv generate-shell-completion zsh)
fi

# ============ Fix keybindings ============

# Needs to run the following lines if the zkbd file does not exist
# autoload zkbd; zkbd

if [ -f ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE} ]; then
    source ~/.zkbd/$TERM-${${DISPLAY:t}:-$VENDOR-$OSTYPE}
    
    [[ -n ${key[Backspace]} ]] && bindkey "${key[Backspace]}" backward-delete-char
    [[ -n ${key[Insert]} ]] && bindkey "${key[Insert]}" overwrite-mode
    [[ -n ${key[Home]} ]] && bindkey "${key[Home]}" beginning-of-line
    [[ -n ${key[PageUp]} ]] && bindkey "${key[PageUp]}" up-line-or-history
    [[ -n ${key[Delete]} ]] && bindkey "${key[Delete]}" delete-char
    [[ -n ${key[End]} ]] && bindkey "${key[End]}" end-of-line
    [[ -n ${key[PageDown]} ]] && bindkey "${key[PageDown]}" down-line-or-history
    [[ -n ${key[Up]} ]] && bindkey "${key[Up]}" up-line-or-search
    [[ -n ${key[Left]} ]] && bindkey "${key[Left]}" backward-char
    [[ -n ${key[Down]} ]] && bindkey "${key[Down]}" down-line-or-search
    [[ -n ${key[Right]} ]] && bindkey "${key[Right]}" forward-char
fi

# ============ Dinamically source ENV =============

# For segmenting TMUX environment sessions using the following command
# tmux new-session -e TARGET_ENV=$(realpath .env)
if [[ ! -z $AGNEROTH_TARGET_ENV ]]; then
    source $AGNEROTH_TARGET_ENV
fi

# ============ Start SSH Agent =============

# Ensure agent is running
ssh-add -l &>/dev/null
if [ "$?" == 2 ]; then
    # Could not open a connection to your authentication agent.

    # Load stored agent connection info.
    test -r ~/.ssh-agent && \
        eval "$(<~/.ssh-agent)" >/dev/null

    ssh-add -l &>/dev/null
    if [ "$?" == 2 ]; then
        # Start agent and store agent connection info.
        (umask 066; ssh-agent > ~/.ssh-agent)
        eval "$(<~/.ssh-agent)" >/dev/null
    fi
fi

# # Load identities
# ssh-add -l &>/dev/null
# if [ "$?" == 1 ]; then
#     # The agent has no identities.
#     # Time to add one.
#     ssh-add $HOME/.ssh/...
# fi